'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import { Shield, ShieldAlert, Code, AlertTriangle, CheckCircle, X } from 'lucide-react';

type VulnerabilityType = 'xss' | 'sqli' | 'csrf';
type Mode = 'vulnerable' | 'secure';

interface TestResult {
  type: VulnerabilityType;
  mode: Mode;
  success: boolean;
  message: string;
  explanation: string;
}

export default function PentestingSandbox() {
  const [mode, setMode] = useState<Mode>('vulnerable');
  const [activeVuln, setActiveVuln] = useState<VulnerabilityType>('xss');
  const [xssInput, setXssInput] = useState('');
  const [sqliInput, setSqliInput] = useState('');
  const [testResult, setTestResult] = useState<TestResult | null>(null);

  // XSS Test
  const testXSS = () => {
    if (mode === 'vulnerable') {
      // Simulate vulnerable behavior
      const hasScript = xssInput.toLowerCase().includes('<script>') || xssInput.toLowerCase().includes('onerror=');
      if (hasScript) {
        setTestResult({
          type: 'xss',
          mode: 'vulnerable',
          success: true,
          message: '⚠️ XSS Attack Successful!',
          explanation: `Your input was rendered directly into the DOM without sanitization. 
In a real application, malicious JavaScript would execute, potentially:
• Stealing session cookies
• Keylogging user input
• Redirecting to phishing sites
• Injecting malicious content

Mitigation: Use Content Security Policy (CSP), sanitize input, and encode output.`,
        });
      } else {
        setTestResult({
          type: 'xss',
          mode: 'vulnerable',
          success: false,
          message: 'Try: <script>alert("XSS")</script>',
          explanation: 'Attempting XSS payload...',
        });
      }
    } else {
      // Secure mode - input is sanitized
      setTestResult({
        type: 'xss',
        mode: 'secure',
        success: false,
        message: '✅ XSS Attack Blocked!',
        explanation: `Security measures in place:
• Input sanitization using DOMPurify
• Content Security Policy (CSP) headers
• HTML entity encoding
• React's built-in XSS protection

Your malicious input was detected and neutralized before reaching the DOM.`,
      });
    }
  };

  // SQL Injection Test
  const testSQLi = () => {
    if (mode === 'vulnerable') {
      const hasSQLi = sqliInput.includes("'") || sqliInput.toLowerCase().includes('or') || sqliInput.toLowerCase().includes('union');
      if (hasSQLi) {
        setTestResult({
          type: 'sqli',
          mode: 'vulnerable',
          success: true,
          message: '⚠️ SQL Injection Successful!',
          explanation: `Query executed: SELECT * FROM users WHERE username = '${sqliInput}'

Your injection bypassed authentication! In a real scenario:
• Full database access
• Data exfiltration
• Database manipulation
• Privilege escalation

Sample vulnerable code:
query = "SELECT * FROM users WHERE username = '" + input + "'"

Mitigation: Use parameterized queries, prepared statements, and ORMs with proper escaping.`,
        });
      } else {
        setTestResult({
          type: 'sqli',
          mode: 'vulnerable',
          success: false,
          message: "Try: admin' OR '1'='1",
          explanation: 'Attempting SQL injection...',
        });
      }
    } else {
      setTestResult({
        type: 'sqli',
        mode: 'secure',
        success: false,
        message: '✅ SQL Injection Blocked!',
        explanation: `Security measures in place:
• Parameterized queries (prepared statements)
• Input validation with whitelist
• ORM with automatic escaping
• Least privilege database user

Secure code example:
query = "SELECT * FROM users WHERE username = ?"
params = [sanitized_input]

Your SQL injection attempt was neutralized by parameterized queries.`,
      });
    }
  };

  const renderDemo = () => {
    switch (activeVuln) {
      case 'xss':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-cyan-400 mb-2">
                Comment Input (Try XSS payload)
              </label>
              <input
                type="text"
                value={xssInput}
                onChange={(e) => setXssInput(e.target.value)}
                placeholder="<script>alert('XSS')</script>"
                className="w-full px-4 py-3 bg-slate-800 border border-slate-700 rounded-lg text-white focus:border-cyan-500 focus:outline-none font-mono text-sm"
              />
              <p className="mt-2 text-xs text-slate-500">
                Example payloads: &lt;script&gt;alert('XSS')&lt;/script&gt; or &lt;img src=x onerror=alert('XSS')&gt;
              </p>
            </div>

            <button
              onClick={testXSS}
              className="px-6 py-3 bg-red-600 hover:bg-red-700 rounded-lg font-semibold transition-colors"
            >
              Execute XSS Test
            </button>

            {mode === 'vulnerable' && xssInput && (
              <div className="p-4 bg-red-500/10 border border-red-500/30 rounded-lg">
                <p className="text-sm text-red-300 mb-2">Vulnerable Output (raw HTML render):</p>
                <div className="p-3 bg-slate-900 rounded border border-red-500/50 font-mono text-xs text-white">
                  {xssInput}
                </div>
              </div>
            )}
          </div>
        );

      case 'sqli':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-cyan-400 mb-2">
                Username Input (Try SQL Injection)
              </label>
              <input
                type="text"
                value={sqliInput}
                onChange={(e) => setSqliInput(e.target.value)}
                placeholder="admin' OR '1'='1"
                className="w-full px-4 py-3 bg-slate-800 border border-slate-700 rounded-lg text-white focus:border-cyan-500 focus:outline-none font-mono text-sm"
              />
              <p className="mt-2 text-xs text-slate-500">
                Example payloads: admin' OR '1'='1 or ' UNION SELECT * FROM users--
              </p>
            </div>

            <button
              onClick={testSQLi}
              className="px-6 py-3 bg-red-600 hover:bg-red-700 rounded-lg font-semibold transition-colors"
            >
              Execute SQL Injection Test
            </button>

            {mode === 'vulnerable' && sqliInput && (
              <div className="p-4 bg-red-500/10 border border-red-500/30 rounded-lg">
                <p className="text-sm text-red-300 mb-2">Vulnerable Query:</p>
                <code className="block p-3 bg-slate-900 rounded border border-red-500/50 font-mono text-xs text-white overflow-x-auto">
                  SELECT * FROM users WHERE username = '{sqliInput}'
                </code>
              </div>
            )}
          </div>
        );

      case 'csrf':
        return (
          <div className="space-y-4">
            <div className="p-4 bg-blue-500/10 border border-blue-500/30 rounded-lg">
              <p className="text-sm text-blue-300">
                <strong>CSRF (Cross-Site Request Forgery)</strong> - Coming Soon
              </p>
              <p className="text-xs text-slate-400 mt-2">
                Demonstration of how CSRF tokens protect against unauthorized state-changing requests.
              </p>
            </div>
          </div>
        );
    }
  };

  return (
    <div className="card p-6 max-w-4xl mx-auto">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-3">
          <Shield className="w-6 h-6 text-cyan-400" />
          <h3 className="text-2xl font-bold text-cyan-400">Live Security Sandbox</h3>
        </div>

        {/* Mode Toggle */}
        <div className="flex items-center gap-2 bg-slate-800 rounded-lg p-1">
          <button
            onClick={() => setMode('vulnerable')}
            className={`px-4 py-2 rounded-md text-sm font-semibold transition-all ${
              mode === 'vulnerable'
                ? 'bg-red-600 text-white'
                : 'text-slate-400 hover:text-white'
            }`}
          >
            <ShieldAlert className="w-4 h-4 inline mr-2" />
            Vulnerable
          </button>
          <button
            onClick={() => setMode('secure')}
            className={`px-4 py-2 rounded-md text-sm font-semibold transition-all ${
              mode === 'secure'
                ? 'bg-green-600 text-white'
                : 'text-slate-400 hover:text-white'
            }`}
          >
            <CheckCircle className="w-4 h-4 inline mr-2" />
            Secure
          </button>
        </div>
      </div>

      {/* Vulnerability Tabs */}
      <div className="flex gap-2 mb-6 border-b border-slate-700">
        {(['xss', 'sqli', 'csrf'] as VulnerabilityType[]).map((vuln) => (
          <button
            key={vuln}
            onClick={() => {
              setActiveVuln(vuln);
              setTestResult(null);
            }}
            className={`px-4 py-2 font-semibold text-sm transition-all ${
              activeVuln === vuln
                ? 'border-b-2 border-cyan-500 text-cyan-400'
                : 'text-slate-400 hover:text-white'
            }`}
          >
            {vuln.toUpperCase()}
          </button>
        ))}
      </div>

      {/* Demo Area */}
      <div className="mb-6">
        {renderDemo()}
      </div>

      {/* Test Result */}
      {testResult && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className={`p-6 rounded-lg border-2 ${
            testResult.success && testResult.mode === 'vulnerable'
              ? 'bg-red-500/10 border-red-500'
              : 'bg-green-500/10 border-green-500'
          }`}
        >
          <div className="flex items-start justify-between mb-4">
            <div className="flex items-center gap-3">
              {testResult.success && testResult.mode === 'vulnerable' ? (
                <AlertTriangle className="w-6 h-6 text-red-400" />
              ) : (
                <CheckCircle className="w-6 h-6 text-green-400" />
              )}
              <h4 className={`text-lg font-bold ${
                testResult.success && testResult.mode === 'vulnerable' ? 'text-red-400' : 'text-green-400'
              }`}>
                {testResult.message}
              </h4>
            </div>
            <button
              onClick={() => setTestResult(null)}
              className="text-slate-400 hover:text-white"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          <div className="space-y-3">
            <p className="text-sm text-slate-300 whitespace-pre-line font-mono leading-relaxed">
              {testResult.explanation}
            </p>

            {testResult.success && testResult.mode === 'vulnerable' && (
              <div className="pt-4 border-t border-slate-700">
                <p className="text-sm text-yellow-400 mb-2">💡 Try Secure Mode</p>
                <button
                  onClick={() => setMode('secure')}
                  className="px-4 py-2 bg-green-600 hover:bg-green-700 rounded-lg text-sm font-semibold transition-colors"
                >
                  Switch to Secure Mode
                </button>
              </div>
            )}
          </div>
        </motion.div>
      )}

      {/* Educational Note */}
      <div className="mt-6 p-4 bg-blue-500/10 border border-blue-500/30 rounded-lg">
        <div className="flex items-start gap-3">
          <Code className="w-5 h-5 text-blue-400 mt-0.5" />
          <div>
            <p className="text-sm text-blue-300 font-semibold mb-1">Educational Purpose Only</p>
            <p className="text-xs text-slate-400">
              This is a controlled sandbox environment for demonstrating security concepts.
              All attacks are simulated and contained. Never attempt these techniques on real systems without authorization.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
